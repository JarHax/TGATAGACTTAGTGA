/*
 * This file is generated by jOOQ.
*/
package com.jarhax.tcgatagacttagtga.db.tables;


import com.jarhax.tcgatagacttagtga.db.Folding;
import com.jarhax.tcgatagacttagtga.db.Indexes;
import com.jarhax.tcgatagacttagtga.db.Keys;
import com.jarhax.tcgatagacttagtga.db.tables.records.TeamsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teams extends TableImpl<TeamsRecord> {

    private static final long serialVersionUID = 1755028798;

    /**
     * The reference instance of <code>folding.teams</code>
     */
    public static final Teams TEAMS = new Teams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamsRecord> getRecordType() {
        return TeamsRecord.class;
    }

    /**
     * The column <code>folding.teams.TEAM_ID</code>.
     */
    public final TableField<TeamsRecord, Integer> TEAM_ID = createField("TEAM_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>folding.teams.NAME</code>.
     */
    public final TableField<TeamsRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * Create a <code>folding.teams</code> table reference
     */
    public Teams() {
        this(DSL.name("teams"), null);
    }

    /**
     * Create an aliased <code>folding.teams</code> table reference
     */
    public Teams(String alias) {
        this(DSL.name(alias), TEAMS);
    }

    /**
     * Create an aliased <code>folding.teams</code> table reference
     */
    public Teams(Name alias) {
        this(alias, TEAMS);
    }

    private Teams(Name alias, Table<TeamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Teams(Name alias, Table<TeamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Folding.FOLDING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEAMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TeamsRecord> getPrimaryKey() {
        return Keys.KEY_TEAMS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TeamsRecord>> getKeys() {
        return Arrays.<UniqueKey<TeamsRecord>>asList(Keys.KEY_TEAMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Teams as(String alias) {
        return new Teams(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Teams as(Name alias) {
        return new Teams(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teams rename(String name) {
        return new Teams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teams rename(Name name) {
        return new Teams(name, null);
    }
}
